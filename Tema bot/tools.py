import re
import os
import openai
import json
from datetime import datetime
# Importar as novas fun√ß√µes de busca por email e telefone
from banco.database import buscar_candidato_por_cpf, criar_candidato, buscar_candidato_por_email, buscar_candidato_por_telefone
from dotenv import load_dotenv

# IMPORTAR A FUN√á√ÉO RAG_ANSWER
from rag_teste import rag_answer # <--- Importa√ß√£o corrigida com base na sua estrutura de pastas

# Carrega vari√°veis de ambiente e define API Key
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("Defina OPENAI_API_KEY no .env")

class ChatContext:
    def __init__(self):
        self.awaiting_confirmation = False
        self.awaiting_cadastro = False
        self.awaiting_sac_option = False
        self.greeted = False
        self.last_cpf_found = None
        self.awaiting_alternative_search = False

FAQ_SAC = {
    "1": {
        "pergunta": "Como ativar minha conta e come√ßar a usar a plataforma?",
        "resposta": (
            "Para ativar sua conta:"
            "\n1Ô∏è‚É£ Acesse https://app.suaempresa.com/ativar-conta"
            "\n2Ô∏è‚É£ Informe seu e-mail cadastrado"
            "\n3Ô∏è‚É£ Clique no link recebido por e-mail"
            "\nPronto! Agora voc√™ pode fazer login e explorar o painel."
        )
    },
    "2": {
        "pergunta": "Onde encontro o material de onboarding do cliente?",
        "resposta": (
            "Voc√™ pode acessar o material de onboarding em:"
            "\nhttps://interna.suaempresa.com/onboarding"
            "\nL√° est√£o v√≠deos, guias e perguntas frequentes."
        )
    },
    "3": {
        "pergunta": "Como integrar com meu sistema de RH/CRM?",
        "resposta": (
            "Para integrar:"
            "\n‚Ä¢ Gere sua chave de API em Configura√ß√µes ‚Üí Integra√ß√µes"
            "\n‚Ä¢ Consulte a documenta√ß√£o em https://docs.suaempresa.com/api"
            "\n‚Ä¢ Se precisar, fale com o time de TI pelo chat interno."
        )
    },
    "4": {
        "pergunta": "Quero falar com um atendente humano",
        "resposta": (
            "Sem problemas! Nossos canais de atendimento s√£o:"
            "\nüìû Telefone: (31) 4000-1234"
            "\nüí¨ Chat interno (Slack): #suporte-cs"
        )
    },
    "5": {
        "pergunta": "Outra d√∫vida (usar buscador avan√ßado)",
        "resposta": (
            # Esta resposta n√£o ser√° mais usada diretamente, mas a pergunta √© para o GPT
            "Claro! Descreva sua d√∫vida em poucas palavras que usarei a base vetorial para buscar a melhor resposta."
        )
    },
}

def _sac_menu() -> str:
    "Retorna o menu de op√ß√µes do SAC."
    linhas = ["üìã Central de Ajuda"]
    for key, faq in FAQ_SAC.items():
        linhas.append(f"{key}) {faq['pergunta']}")
    return "\n".join(linhas)

def _get_system_prompt_for_gpt(context: ChatContext) -> str:
    """
    Retorna o prompt do sistema para o GPT, instruindo-o a identificar a inten√ß√£o
    e responder em formato JSON. O prompt √© adaptado ao contexto.
    """
    base_prompt = """
Voc√™ √© um assistente de Customer Success focado em Onboarding, com tom caloroso, receptivo e emp√°tico.
Gere respostas originais, variando a linguagem e sin√¥nimos. Evite clich√™s repetidos.

Sua resposta DEVE ser uma estrutura JSON no formato:
`{{ "acao": "saudacao" | "problema" | "duvida" | "ja_cliente" | "nao_cliente" | "confirmar_cpf" | "recusar_cpf" | "fornecer_cadastro" | "escolher_sac" | "sac_duvida_avancada" | "contato_alternativo" | "outro", "resposta": "Texto da resposta para o usu√°rio" }}`.

**Detalhes para cada 'acao':**
- **saudacao:** Cumprimente de modo leve e humanizado, sem usar frases padr√µes repetidas. N√£o √© obrigat√≥rio dizer "bom dia/tarde/noite" toda vez; use conforme o hor√°rio e contexto. Ofere√ßa ajuda no mesmo texto.
- **problema:** Demonstre empatia genu√≠na e antes de pedir detalhes do problema, pergunte se o usu√°rio j√° √© cliente para direcionar o pr√≥ximo passo.
- **duvida:** Mostre interesse e pe√ßa detalhes adicionais de forma acolhedora, sem mencionar cliente.
- **ja_cliente:** Agrade√ßa pela confian√ßa e solicite o CPF (apenas d√≠gitos ou formatado) para valida√ß√£o.
- **nao_cliente:** Informe que ser√° preciso um cadastro simples e solicite em linhas separadas: Nome, CPF, Email e Telefone.
- **confirmar_cpf:** O usu√°rio confirmou que os dados do CPF est√£o corretos. Responda positivamente e apresente o menu do SAC. N√ÉO adicione perguntas sobre cadastro ou outras op√ß√µes aqui.
- **recusar_cpf:** O usu√°rio negou que os dados do CPF estejam corretos. Neste caso, pe√ßa ao usu√°rio que informe outro e-mail ou n√∫mero de telefone para tentar localizar o cadastro.
- **fornecer_cadastro:** O usu√°rio est√° fornecendo os dados para cadastro (Nome, CPF, Email, Telefone). Voc√™ n√£o responder√°, apenas o c√≥digo Python processar√°.
- **escolher_sac:** O usu√°rio est√° escolhendo uma op√ß√£o do menu do SAC (n√∫mero 1 a 4).
- **sac_duvida_avancada:** O usu√°rio escolheu a op√ß√£o 5 do SAC e agora est√° descrevendo sua d√∫vida avan√ßada.
- **contato_alternativo:** O usu√°rio explicitamente pediu ou indicou que prefere outra forma de contato (telefone, chat). Voc√™ deve fornecer as op√ß√µes.
- **outro:** Responda de forma simp√°tica que n√£o entendeu e convide a reformular, ou se a inten√ß√£o n√£o se encaixa nas categorias anteriores.

**Instru√ß√µes de Contexto Atuais:**
"""
    if context.awaiting_confirmation:
        base_prompt += f"\n- O usu√°rio est√° aguardando para confirmar ou negar os dados do CPF '{context.last_cpf_found}'. Interprete a resposta dele para definir 'acao' como 'confirmar_cpf' ou 'recusar_cpf'. N√£o force 'sim' ou 'n√£o' em sua resposta, apenas interprete a inten√ß√£o. A mensagem j√° exibida para o usu√°rio foi gerada pelo banco de dados e j√° cont√©m a pergunta de confirma√ß√£o. N√ÉO adicione perguntas ou sugest√µes adicionais √† resposta final."
    elif context.awaiting_cadastro:
        base_prompt += "\n- O usu√°rio est√° aguardando para fornecer Nome, CPF, Email e Telefone para cadastro. A 'acao' deve ser 'fornecer_cadastro' se ele enviou os dados em linhas separadas ou 'outro' se n√£o."
    elif context.awaiting_sac_option:
        # **ATEN√á√ÉO AQUI: Refor√ßando a instru√ß√£o para o GPT**
        # Este prompt √© mais para guiar o GPT, mas o c√≥digo vai for√ßar a a√ß√£o.
        base_prompt += "\n- O usu√°rio est√° no menu do SAC. Se a mensagem for APENAS um n√∫mero entre 1 e 5 (ex: '1', '2', '5'), a 'acao' DEVE ser 'escolher_sac'. SE a mensagem for uma descri√ß√£o textual de uma d√∫vida (mesmo que curta), e o usu√°rio j√° escolheu a op√ß√£o 5 anteriormente (indicado pelo 'awaiting_sac_option' estar ativo), a 'acao' DEVE ser 'sac_duvida_avancada'."
    elif context.awaiting_alternative_search: # NOVO
        base_prompt += "\n- O usu√°rio est√° aguardando para fornecer um email ou n√∫mero de telefone para que o bot tente localizar o cadastro por outros meios."
        base_prompt += "\n- Se o usu√°rio fornecer um email, defina 'acao' como 'fornecer_email_alternativo'. Se for um telefone, 'acao' como 'fornecer_telefone_alternativo'. Caso contr√°rio, 'acao' como 'outro'."

    base_prompt += "\n\nSua resposta FINAL deve ser APENAS o JSON. N√£o inclua texto extra."
    return base_prompt

def processar_mensagem(mensagem: str, context: ChatContext) -> str:
    """
    Processa a mensagem do usu√°rio conforme o contexto espec√≠fico da sess√£o,
    delegando mais responsabilidade ao GPT para interpretar a inten√ß√£o.
    """
    texto = mensagem.strip()
    lower = texto.lower()

    # 1. Tratamento de sauda√ß√£o inicial para evitar repeti√ß√£o excessiva
    # Se for uma sauda√ß√£o pura e n√£o estiver em awaiting_sac_option,
    # deixa o fluxo ir para o GPT gerar uma sauda√ß√£o original.
    # Se j√° saudou ou se estiver em awaiting_sac_option, responde "Em que mais posso ajudar".
    if re.search(r"\b(oi|ol√°|ola|bom dia|boa tarde|boa noite)\b", lower):
        if not context.greeted:
            context.greeted = True
            # Permite que o GPT decida a sauda√ß√£o inicial
        else:
            return "Em que mais posso ajudar voc√™?"

    # **NOVO BLOCO DE FOR√áAMENTO DE RAG**
    # 2. PRIORIDADE M√ÅXIMA: Se o bot est√° esperando a descri√ß√£o de uma d√∫vida avan√ßada (ap√≥s o 5)
    # E a mensagem do usu√°rio N√ÉO √© um n√∫mero de op√ß√£o do SAC (j√° que ele j√° "escolheu" 5 implicitamente)
    if context.awaiting_sac_option and not (texto.isdigit() and 1 <= int(texto) <= 5):
        print("DEBUG: Entrou no bloco de for√ßamento de RAG. Chamando rag_answer.")
        # Se o bot est√° esperando uma d√∫vida avan√ßada, qualquer input que n√£o seja uma op√ß√£o de menu
        # deve ser tratado como a d√∫vida para o RAG.
        rag_result = rag_answer(texto) # Chama a fun√ß√£o RAG com a pergunta do usu√°rio
        context.awaiting_sac_option = False # A d√∫vida foi respondida, reseta o estado
        return rag_result # Retorna a resposta obtida do RAG


    # 3. Fluxo de cadastro (tem prioridade se o bot pediu dados de cadastro E os dados completos foram enviados)
    # Mudei a ordem para que este bloco venha DEPOIS do for√ßamento de RAG.
    if context.awaiting_cadastro:
        partes = texto.splitlines()
        if len(partes) >= 4 and all(len(p.strip()) > 0 for p in partes[:4]):
            nome, cpf, email, telefone = partes[0].strip(), partes[1].strip(), partes[2].strip(), partes[3].strip()

            cpf_limpo = re.sub(r"\D", "", cpf)
            if not re.fullmatch(r"\d{11}", cpf_limpo):
                context.awaiting_cadastro = True
                return "CPF inv√°lido no cadastro. Por favor, verifique e tente novamente."
            if not re.fullmatch(r"[^@]+@[^@]+\.[^@]+", email):
                context.awaiting_cadastro = True
                return "Email inv√°lido no cadastro. Por favor, verifique e tente novamente."

            ok, resp_db = criar_candidato(nome, cpf_limpo, email, telefone)
            context.awaiting_cadastro = False
            if ok:
                context.awaiting_sac_option = True
                return resp_db + "\n\n" + _sac_menu()
            return resp_db

    # 4. **Prioridade M√°xima:** Tentar reconhecer um CPF sempre que ele for enviado
    cpf_match = re.search(r"\d{3}\.?\d{3}\.?\d{3}-?\d{2}", texto)
    if cpf_match and not context.awaiting_alternative_search: # S√≥ busca por CPF se n√£o estiver esperando email/telefone
        cpf_limpo = re.sub(r"\D", "", cpf_match.group())
        context.last_cpf_found = cpf_limpo
        resp_db = buscar_candidato_por_cpf(cpf_limpo)

        if "Encontramos seu cadastro" in resp_db: # Se o CPF foi encontrado
            context.awaiting_confirmation = True
        elif "Voc√™ gostaria de se cadastrar?" in resp_db: # Se o CPF n√£o foi encontrado E sugere cadastro
            context.awaiting_cadastro = True

        return resp_db

    # 5. **NOVO FLUXO:** Lidar com busca alternativa por email/telefone
    # Este bloco s√≥ √© ativado se o bot estiver no estado awaiting_alternative_search
    if context.awaiting_alternative_search:
        email_match = re.fullmatch(r"[^@]+@[^@]+\.[^@]+", texto)
        tel_digits = re.sub(r"\D", "", texto)

        resp_db_alt = None

        if email_match:
            resp_db_alt = buscar_candidato_por_email(texto)
            context.last_cpf_found = None # Resetar last_cpf_found ao buscar por outro meio
        elif 10 <= len(tel_digits) <= 11:
            resp_db_alt = buscar_candidato_por_telefone(texto)
            context.last_cpf_found = None # Resetar last_cpf_found ao buscar por outro meio

        if resp_db_alt: # Se houve uma tentativa de busca por email ou telefone
            if "Encontramos seu cadastro" in resp_db_alt:
                context.awaiting_alternative_search = False # Encontrou, sai do estado
                context.awaiting_confirmation = True
                return resp_db_alt
            elif "n√£o encontrei seu cadastro" in resp_db_alt:
                context.awaiting_alternative_search = False # N√£o encontrou, sai do estado de busca alternativa
                context.awaiting_cadastro = True # Agora sim, sugere cadastro
                return resp_db_alt + " Voc√™ gostaria de se cadastrar?"
            # Caso n√£o seja nenhuma das strings esperadas (erro de conex√£o, por exemplo)
            return resp_db_alt
        else: # Se o usu√°rio n√£o forneceu nem email nem telefone v√°lidos no estado de busca alternativa
            return "N√£o consegui identificar um e-mail ou telefone v√°lido. Por favor, digite um e-mail ou um n√∫mero de telefone para continuar a busca."


    # 6. Chamada ao GPT para interpreta√ß√£o flex√≠vel da inten√ß√£o (S√≥ se n√£o foi interceptado antes)
    system_prompt = _get_system_prompt_for_gpt(context)
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user",  "content": texto}
    ]
    try:
        resp = openai.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            temperature=0.4,
            response_format={"type": "json_object"}
        )
        gpt_json_response = json.loads(resp.choices[0].message.content.strip())
        action = gpt_json_response.get("acao")
        reply_text = gpt_json_response.get("resposta")

        print(f"DEBUG: Context awaiting_sac_option: {context.awaiting_sac_option}")
        print(f"DEBUG: User Input: {texto}")
        print(f"DEBUG: GPT Action: {action}")
        print(f"DEBUG: GPT Reply Text: {reply_text}")


        # L√≥gica para reagir √† "acao" do GPT
        if action == "confirmar_cpf":
            context.awaiting_confirmation = False
            context.awaiting_sac_option = True
            # Reutiliza last_cpf_found (que pode ter sido setado por cpf, email ou tel)
            return f"√ìtimo! Seus dados foram validados. Como posso te ajudar hoje?\n\n" + _sac_menu()

        elif action == "recusar_cpf":
            context.awaiting_confirmation = False
            context.last_cpf_found = None
            context.awaiting_alternative_search = True # Ativa o novo estado de busca alternativa
            return "Entendo. Por favor, informe seu melhor e-mail ou n√∫mero de telefone para tentarmos localizar seu cadastro." # Mensagem padronizada

        # Se o GPT tentar uma dessas a√ß√µes, mas n√£o est√° no contexto de busca alternativa, o bloco 4 acima j√° trataria.
        # Estas a√ß√µes s√£o mais para o GPT gerar a resposta inicial.
        elif action == "fornecer_email_alternativo" or action == "fornecer_telefone_alternativo":
            # Se o GPT gerou essas a√ß√µes, mas o bot n√£o est√° no estado awaiting_alternative_search,
            # ele ir√° para o fluxo principal ou ser√° capturado pelo bloco 4.
            # Aqui, apenas garantimos que o GPT n√£o vai adicionar mais texto, pois o bloco 4 j√° faz isso.
            if context.awaiting_alternative_search: # S√≥ continua se estiver no estado
                return processar_mensagem(texto, context) # Re-processa a mensagem, que agora ser√° pega pelo bloco 4.
            else:
                return reply_text # Retorna a resposta do GPT se n√£o estiver no estado espec√≠fico

        elif action == "contato_alternativo":
            context.awaiting_confirmation = False
            context.awaiting_cadastro = False
            context.awaiting_sac_option = False
            context.awaiting_alternative_search = False
            return reply_text

        elif action == "ja_cliente":
            pass # Deixa o fluxo seguir para tentar reconhecer o CPF

        elif action == "nao_cliente":
            context.awaiting_cadastro = True

        elif action == "escolher_sac":
            # Esta parte s√≥ ser√° alcan√ßada se o bot *n√£o* estiver em awaiting_sac_option,
            # ou se a mensagem for um n√∫mero, e o GPT retornou corretamente "escolher_sac".
            if texto.isdigit() and 1 <= int(texto) <= 5:
                if texto == "5":
                    context.awaiting_sac_option = True # Mant√©m o estado para aguardar a d√∫vida avan√ßada
                    return "Ok, poderia me descrever seu problema para eu poder te ajudar a resolver seu problema"
                else: # Para op√ß√µes 1-4
                    context.awaiting_sac_option = False # A op√ß√£o foi tratada, reseta o estado
                    return FAQ_SAC[texto]["resposta"]
            else:
                # Se o GPT retornou escolher_sac mas n√£o √© um d√≠gito, e n√£o est√° em awaiting_sac_option
                # (j√° que o bloco de for√ßamento trataria isso),
                # √© uma interpreta√ß√£o errada do GPT em um contexto diferente.
                context.awaiting_sac_option = False # Reseta o estado para evitar loops
                return reply_text # Retorna o que o GPT sugeriu originalmente

        # O bloco `sac_duvida_avancada` foi movido para o in√≠cio como uma prioridade.
        # Portanto, esta parte do c√≥digo para `sac_duvida_avancada` n√£o √© mais necess√°ria aqui.
        # elif action == "sac_duvida_avancada":
        #     rag_result = rag_answer(texto)
        #     context.awaiting_sac_option = False
        #     return rag_result


        # Se o GPT sugeriu algo com 'central de ajuda' ou 'menu' mas n√£o foi uma escolha expl√≠cita do SAC
        if "central de ajuda" in reply_text.lower() or "menu" in reply_text.lower() or "sac" in reply_text.lower():
            context.awaiting_sac_option = True
            reply_text += "\n\n" + _sac_menu()

        return reply_text

    except json.JSONDecodeError:
        print(f"Erro ao decodificar JSON da resposta do GPT: {resp.choices[0].message.content}")
        return "Desculpe, tive um problema ao processar sua solicita√ß√£o. Por favor, tente novamente."
    except Exception as e:
        print(f"Erro inesperado com a API OpenAI: {e}")
        return "Desculpe, estou com dificuldades no momento. Tente novamente mais tarde."