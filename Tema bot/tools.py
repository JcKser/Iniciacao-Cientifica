import re
import os
import openai
import json
from datetime import datetime
from banco.database import buscar_usuario_por_cpf, criar_candidato, buscar_usuario_por_email, buscar_usuario_por_telefone
from dotenv import load_dotenv

# IMPORTAR A FUN√á√ÉO RAG_ANSWER E A EXCE√á√ÉO RAGFallbackError
from rag_teste import rag_answer, RAGFallbackError
from utils.email_utils import send_support_ticket

# Carrega vari√°veis de ambiente e define API Key
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
if not openai.api_key:
    raise ValueError("Defina OPENAI_API_KEY no .env")

class ChatContext:
    def __init__(self):
        self.awaiting_confirmation = False
        self.awaiting_cadastro = False
        self.awaiting_sac_option = False
        self.greeted = False
        self.last_cpf_found = None
        self.awaiting_alternative_search = False
        self.user_data_found = {}
        self.last_rag_query = None

FAQ_SAC = {
    "1": {
        "pergunta": "Como ativar minha conta e come√ßar a usar a plataforma?",
        "resposta": (
            "Para ativar sua conta:"
            "\n1Ô∏è‚É£ Acesse https://app.suaempresa.com/ativar-conta"
            "\n2Ô∏è‚É£ Informe seu e-mail cadastrado"
            "\n3Ô∏è‚É£ Clique no link recebido por e-mail"
            "\nPronto! Agora voc√™ pode fazer login e explorar o painel."
        )
    },
    "2": {
        "pergunta": "Onde encontro o material de onboarding do cliente?",
        "resposta": (
            "Voc√™ pode acessar o material de onboarding em:"
            "\nhttps://interna.suaempresa.com/onboarding"
            "\nL√° est√£o v√≠deos, guias e perguntas frequentes."
        )
    },
    "3": {
        "pergunta": "Como integrar com meu sistema de RH/CRM?",
        "resposta": (
            "Para integrar:"
            "\n‚Ä¢ Gere sua chave de API em Configura√ß√µes ‚Üí Integra√ß√µes"
            "\n‚Ä¢ Consulte a documenta√ß√£o em https://docs.suaempresa.com/api"
            "\n‚Ä¢ Se precisar, fale com o time de TI pelo chat interno."
        )
    },
    "4": {
        "pergunta": "Quero falar com um atendente humano",
        "resposta": (
            "Sem problemas! Nossos canais de atendimento s√£o:"
            "\nüìû Telefone: (31) 4000-1234"
            "\nüí¨ Chat interno (Slack): #suporte-cs"
        )
    },
    "5": {
        "pergunta": "Outra d√∫vida (usar buscador avan√ßado)",
        "resposta": (
            "Claro! Descreva sua d√∫vida em poucas palavras que usarei a base vetorial para buscar a melhor resposta."
        )
    },
}

def _sac_menu() -> str:
    "Retorna o menu de op√ß√µes do SAC."
    linhas = ["üìã Central de Ajuda"]
    for key, faq in FAQ_SAC.items():
        linhas.append(f"{key}) {faq['pergunta']}")
    return "\n".join(linhas)

def _get_system_prompt_for_gpt(context: ChatContext) -> str:
    """
    Retorna o prompt do sistema para o GPT, instruindo-o a identificar a inten√ß√£o
    e responder em formato JSON. O prompt √© adaptado ao contexto.
    """
    base_prompt = """
Voc√™ √© um assistente de Customer Success focado em Onboarding, com tom caloroso, receptivo e emp√°tico.
Gere respostas originais, variando a linguagem e sin√¥nimos. Evite clich√™s repetidos.

Sua resposta DEVE ser uma estrutura JSON no formato:
`{{ "acao": "saudacao" | "problema" | "duvida" | "ja_cliente" | "nao_cliente" | "confirmar_cpf" | "recusar_cpf" | "fornecer_cadastro" | "escolher_sac" | "sac_duvida_avancada" | "contato_alternativo" | "outro", "resposta": "Texto da resposta para o usu√°rio" }}`.

**Detalhes para cada 'acao':**
- **saudacao:** Cumprimente de modo leve e humanizado, sem usar frases padr√µes repetidas. N√£o √© obrigat√≥rio dizer "bom dia/tarde/noite" toda vez; use conforme o hor√°rio e contexto. Ofere√ßa ajuda no mesmo texto.
- **problema:** Demonstre empatia genu√≠na e antes de pedir detalhes do problema, pergunte se o usu√°rio j√° √© cliente para direcionar o pr√≥ximo passo.
- **duvida:** Mostre interesse e pe√ßa detalhes adicionais de forma acolhedora, sem mencionar cliente.
- **ja_cliente:** Agrade√ßa pela confian√ßa e solicite o CPF (apenas d√≠gitos ou formatado) para valida√ß√£o.
- **nao_cliente:** Informe que ser√° preciso um cadastro simples e solicite em linhas separadas: Nome, CPF, Email e Telefone.
- **confirmar_cpf:** O usu√°rio confirmou que os dados do CPF est√£o corretos. Responda positivamente e apresente o menu do SAC. N√ÉO adicione perguntas sobre cadastro ou outras op√ß√µes aqui.
- **recusar_cpf:** O usu√°rio negou que os dados do CPF estejam corretos. Neste caso, pe√ßa ao usu√°rio que informe outro e-mail ou n√∫mero de telefone para tentar localizar o cadastro.
- **fornecer_cadastro:** O usu√°rio est√° fornecendo os dados para cadastro (Nome, CPF, Email, Telefone). Voc√™ n√£o responder√°, apenas o c√≥digo Python processar√°.
- **escolher_sac:** O usu√°rio est√° escolhendo uma op√ß√£o do menu do SAC (n√∫mero 1 a 4).
- **sac_duvida_avancada:** O usu√°rio escolheu a op√ß√£o 5 do SAC e agora est√° descrevendo sua d√∫vida avan√ßada.
- **contato_alternativo:** O usu√°rio explicitamente pediu ou indicou que prefere outra forma de contato (telefone, chat). Voc√™ deve fornecer as op√ß√µes.
- **outro:** Responda de forma simp√°tica que n√£o entendeu e convide a reformular, ou se a inten√ß√£o n√£o se encaixa nas categorias anteriores.

**Instru√ß√µes de Contexto Atuais:**
"""
    if context.awaiting_confirmation:
        base_prompt += f"\n- O usu√°rio est√° aguardando para confirmar ou negar os dados do CPF '{context.last_cpf_found}'. Os dados encontrados s√£o: Nome: {context.user_data_found.get('nome', '')}, Email: {context.user_data_found.get('email', '')}, Telefone: {context.user_data_found.get('telefone', '')}. Interprete a resposta dele para definir 'acao' como 'confirmar_cpf' ou 'recusar_cpf'. N√£o force 'sim' ou 'n√£o' em sua resposta, apenas interprete a inten√ß√£o. A mensagem j√° exibida para o usu√°rio foi gerada pelo banco de dados e j√° cont√©m a pergunta de confirma√ß√£o. N√ÉO adicione perguntas ou sugest√µes adicionais √† resposta final."
    elif context.awaiting_cadastro:
        base_prompt += "\n- O usu√°rio est√° aguardando para fornecer Nome, CPF, Email e Telefone para cadastro. A 'acao' deve ser 'fornecer_cadastro' se ele enviou os dados em linhas separadas ou 'outro' se n√£o."
    elif context.awaiting_sac_option:
        base_prompt += "\n- O usu√°rio est√° no menu do SAC. Se a mensagem for APENAS um n√∫mero entre 1 e 5 (ex: '1', '2', '5'), a 'acao' DEVE ser 'escolher_sac'. SE a mensagem for uma descri√ß√£o textual de uma d√∫vida (mesmo que curta), e o usu√°rio j√° escolheu a op√ß√£o 5 anteriormente (indicado pelo 'awaiting_sac_option' estar ativo), a 'acao' DEVE ser 'sac_duvida_avancada'."
    elif context.awaiting_alternative_search:
        base_prompt += "\n- O usu√°rio est√° aguardando para fornecer um email ou n√∫mero de telefone para que o bot tente localizar o cadastro por outros meios."
        base_prompt += "\n- Se o usu√°rio fornecer um email, defina 'acao' como 'fornecer_email_alternativo'. Se for um telefone, 'acao' como 'fornecer_telefone_alternativo'. Caso contr√°rio, 'acao' como 'outro'."

    base_prompt += "\n\nSua resposta FINAL deve ser APENAS o JSON. N√£o inclua texto extra."
    return base_prompt

def processar_mensagem(mensagem: str, context: ChatContext) -> str:
    """
    Processa a mensagem do usu√°rio conforme o contexto espec√≠fico da sess√£o,
    delegando mais responsabilidade ao GPT para interpretar a inten√ß√£o.
    """
    texto = mensagem.strip()
    lower = texto.lower()

    # 1. Tratamento de sauda√ß√£o inicial
    if re.search(r"\b(oi|ol√°|ola|bom dia|boa tarde|boa noite)\b", lower):
        if not context.greeted:
            context.greeted = True
            pass
        else:
            return "Em que mais posso ajudar voc√™?"
    
    # 2. PRIORIDADE M√ÅXIMA: Tratamento de RAG
    if context.awaiting_sac_option and not (texto.isdigit() and 1 <= int(texto) <= 5):
        print("DEBUG: Entrou no bloco de for√ßamento de RAG. Chamando rag_answer.")
        context.last_rag_query = texto
        try:
            rag_result = rag_answer(texto)
            context.awaiting_sac_option = False
            return rag_result
        except RAGFallbackError as e:
            print(f"DEBUG: RAG falhou: {e}. Criando ticket de suporte.")
            context.awaiting_sac_option = False
            
            ticket_info = {
                "protocolo": f"CHATBOT-FALLBACK-{datetime.now().strftime('%Y%m%d%H%M%S')}",
                "assunto": f"D√∫vida n√£o respondida pelo RAG: {context.last_rag_query}",
                "data_hora": datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
                "nome": context.user_data_found.get('nome', 'N√£o informado'),
                "email": context.user_data_found.get('email', 'N√£o informado'),
                "telefone": context.user_data_found.get('telefone', 'N√£o informado'),
                "cpf": context.user_data_found.get('cpf', 'N√£o informado'),
                "last_rag_query": context.last_rag_query
            }
            
            send_success = send_support_ticket(ticket_info)
            
            if send_success:
                return "Me desculpa, mesmo com esses detalhes n√£o consigo te ajudar com esse problema no momento. Mas fique tranquilo(a), criamos um ticket de ajuda com o n√∫mero de protocolo **{protocolo}**. Em breve um de nossos especialistas entrar√° em contato para te ajudar!".format(protocolo=ticket_info['protocolo'])
            else:
                return "Me desculpa, mesmo com esses detalhes n√£o consigo te ajudar com esse problema no momento. N√£o foi poss√≠vel criar um ticket automaticamente. Por favor, tente entrar em contato diretamente com nosso suporte pelo telefone (31) 4000-1234."

    # 3. <--- C√ìDIGO CORRIGIDO: Fluxo de cadastro robusto com Regex
    if context.awaiting_cadastro:
        # Tenta extrair os dados usando express√µes regulares para mais flexibilidade
        nome_match = re.search(r"(?:nome completo|nome)[\s:]*(?P<nome>[A-Za-z√Ä-√∫\s]+)", texto, re.IGNORECASE)
        cpf_match = re.search(r"(?P<cpf>\d{3}\.?\d{3}\.?\d{3}-?\d{2}|\d{11})", texto)
        email_match = re.search(r"(?P<email>[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})", texto)
        telefone_match = re.search(r"(?P<telefone>\(?\d{2}\)?\s?\d?[\s-]?\d{4,5}[\s-]?\d{4})", texto)

        # Se encontrou todos os dados necess√°rios, prossegue com o cadastro
        if nome_match and cpf_match and email_match and telefone_match:
            nome = nome_match.group('nome').strip()
            cpf_limpo = re.sub(r'\D', '', cpf_match.group('cpf'))
            email = email_match.group('email').strip()
            telefone = telefone_match.group('telefone').strip()

            # Valida√ß√µes dos dados extra√≠dos
            if not re.fullmatch(r"\d{11}", cpf_limpo):
                return "O CPF informado parece inv√°lido. Por favor, verifique e envie os dados novamente."
            
            # Chama a fun√ß√£o para criar o candidato no banco
            ok, resp_db = criar_candidato(nome, cpf_limpo, email, telefone)
            context.awaiting_cadastro = False # Finaliza o estado de aguardar cadastro
            
            if ok:
                context.awaiting_sac_option = True
                context.user_data_found = {"nome": nome, "cpf": cpf_limpo, "email": email, "telefone": telefone}
                return resp_db + "\n\n" + _sac_menu()
            else:
                # Retorna a mensagem de erro do banco (ex: CPF/email duplicado)
                return resp_db
        else:
            # Se n√£o encontrou todos os dados na mensagem, deixa o fluxo continuar para o GPT
            # que poder√° pedir para o usu√°rio reenviar os dados.
            pass

    # 4. <--- C√ìDIGO CORRIGIDO: Prote√ß√£o no fluxo de busca por CPF
    cpf_match = re.search(r"\d{3}\.?\d{3}\.?\d{3}-?\d{2}", texto)
    # Adicionada a condi√ß√£o "not context.awaiting_cadastro"
    if cpf_match and not context.awaiting_cadastro and not context.awaiting_alternative_search:
        cpf_limpo = re.sub(r"\D", "", cpf_match.group())
        context.last_cpf_found = cpf_limpo
        
        user_data = buscar_usuario_por_cpf(cpf_limpo)

        if user_data:
            context.awaiting_confirmation = True
            context.user_data_found = user_data
            return (f"**Encontramos um poss√≠vel cadastro!**\n\n"
                    f"**Nome:** {user_data['nome']}\n"
                    f"**E-mail:** {user_data['email']}\n"
                    f"**Telefone:** {user_data['telefone']}\n\n"
                    "√â voc√™ mesmo? ")
        else:
            context.awaiting_alternative_search = True
            return "N√£o encontrei seu cadastro com este CPF. Gostaria de tentar com seu e-mail ou telefone?"

    # 5. Fluxo de busca alternativa por email/telefone
    if context.awaiting_alternative_search:
        email_match = re.fullmatch(r"[^@]+@[^@]+\.[^@]+", texto)
        tel_digits = re.sub(r"\D", "", texto)
        user_data_alt = None

        if email_match:
            user_data_alt = buscar_usuario_por_email(texto)
        elif 10 <= len(tel_digits) <= 11:
            user_data_alt = buscar_usuario_por_telefone(texto)
        else:
            return "N√£o consegui identificar um e-mail ou telefone v√°lido. Por favor, digite um para continuar a busca."

        if user_data_alt:
            context.awaiting_alternative_search = False
            context.awaiting_confirmation = True
            context.user_data_found = user_data_alt
            return (f"**Encontramos um poss√≠vel cadastro associado a este dado!**\n\n"
                    f"**Nome:** {user_data_alt['nome']}\n"
                    f"**E-mail:** {user_data_alt['email']}\n"
                    f"**Telefone:** {user_data_alt['telefone']}\n\n"
                    "√â voc√™ mesmo? Por favor, **responda 'sim' ou 'n√£o'**.")
        else:
            context.awaiting_alternative_search = False
            context.awaiting_cadastro = True
            return "N√£o encontrei seu cadastro com o e-mail ou telefone fornecido. Voc√™ gostaria de se cadastrar para ter acesso √† nossa plataforma?"

    # 6. Chamada ao GPT para interpreta√ß√£o flex√≠vel
    system_prompt = _get_system_prompt_for_gpt(context)
    messages = [
        {"role": "system", "content": system_prompt},
        {"role": "user",  "content": texto}
    ]
    try:
        resp = openai.chat.completions.create(
            model="gpt-4-turbo",
            messages=messages,
            temperature=0.4,
            response_format={"type": "json_object"}
        )
        gpt_json_response = json.loads(resp.choices[0].message.content.strip())
        action = gpt_json_response.get("acao")
        reply_text = gpt_json_response.get("resposta")

        print(f"DEBUG: Context awaiting_sac_option: {context.awaiting_sac_option}")
        print(f"DEBUG: User Input: {texto}")
        print(f"DEBUG: GPT Action: {action}")
        print(f"DEBUG: GPT Reply Text: {reply_text}")

        # L√≥gica para reagir √† "acao" do GPT
        if action == "confirmar_cpf":
            context.awaiting_confirmation = False
            context.awaiting_sac_option = True
            return f"√ìtimo! Seus dados foram validados. Como posso te ajudar hoje?\n\n" + _sac_menu()

        elif action == "recusar_cpf":
            context.awaiting_confirmation = False
            context.last_cpf_found = None
            context.user_data_found = {}
            context.awaiting_alternative_search = True
            return "Entendo. Por favor, informe seu melhor e-mail ou n√∫mero de telefone para tentarmos localizar seu cadastro."

        elif action == "ja_cliente":
            return "Que √≥timo! Para que eu possa acessar seu cadastro e te ajudar melhor, voc√™ poderia me informar seu CPF (somente os n√∫meros)?"

        elif action == "nao_cliente":
            context.awaiting_cadastro = True
            return "Entendi. Para que voc√™ possa usar nossa plataforma e ter acesso a todas as funcionalidades, precisamos de um r√°pido cadastro. Por favor, me informe:\nSeu Nome Completo:\nSeu CPF (apenas n√∫meros):\nSeu E-mail:\nSeu Telefone (com DDD):"

        elif action == "escolher_sac":
            if texto.isdigit() and 1 <= int(texto) <= 5:
                if texto == "5":
                    context.awaiting_sac_option = True
                    return "Ok, poderia me descrever sua d√∫vida em poucas palavras para eu poder buscar a melhor resposta na nossa base de conhecimento?"
                else:
                    context.awaiting_sac_option = False
                    return FAQ_SAC[texto]["resposta"]
            else:
                context.awaiting_sac_option = False
                return reply_text
        
        if "central de ajuda" in reply_text.lower() or "menu" in reply_text.lower() or "sac" in reply_text.lower():
            context.awaiting_sac_option = True
            reply_text += "\n\n" + _sac_menu()
        
        return reply_text

    except json.JSONDecodeError:
        print(f"Erro ao decodificar JSON da resposta do GPT: {resp.choices[0].message.content}")
        return "Desculpe, tive um problema ao processar sua solicita√ß√£o. Por favor, tente novamente."
    except Exception as e:
        print(f"Erro inesperado com a API OpenAI: {e}")
        return "Desculpe, estou com dificuldades no momento. Tente novamente mais tarde."