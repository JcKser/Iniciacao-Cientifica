from langchain.tools import tool
from banco.database import listar_vagas_ordenadas, buscar_detalhes_vaga
from banco.db import buscar_metricas_por_vaga, gerar_pdf_relatorio_flexivel
from openai import OpenAI
import os
from shared_context import set_ultima_vaga_detalhada, get_ultima_vaga_detalhada

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

@tool
def verificar_vagas_disponiveis():
    """Verifica se h√° vagas dispon√≠veis.
    Se houver, retorna uma resposta simples perguntando se o usu√°rio deseja v√™-las.
    """
    vagas = listar_vagas_ordenadas()
    
    if vagas:
        prompt = """
        Voc√™ √© um assistente de RH amig√°vel e informal. Responda de maneira natural sem formata√ß√£o especial.
        Exemplos: 
        √ìtima not√≠cia! Temos vagas abertas. Quer dar uma olhada?
        Sim, temos oportunidades dispon√≠veis. Quer que eu te mostre?
        Temos algumas posi√ß√µes abertas. Gostaria que eu listasse elas para voc√™?
        Gere uma nova resposta sem repetir os exemplos.
        """
        resposta = client.chat.completions.create(
            model="gpt-4",
            temperature=0.9,
            messages=[{"role": "user", "content": prompt}]
        ).choices[0].message.content.strip()
        resposta = resposta.lstrip("‚Ä¢-").strip().strip('"')
        return resposta
    else:
        return "No momento, n√£o temos vagas dispon√≠veis. Mas fique de olho que sempre abrimos novas oportunidades!"

@tool
def listar_vagas():
    """Lista todas as vagas dispon√≠veis no momento com uma introdu√ß√£o din√¢mica."""
    vagas = listar_vagas_ordenadas()
    
    if vagas:
        prompt = """
        Voc√™ √© um assistente de RH. Gere uma introdu√ß√£o natural para uma lista de vagas dispon√≠veis sem formata√ß√£o especial.
        Exemplos: 
        Aqui est√£o as vagas abertas no momento:
        Essas s√£o as oportunidades dispon√≠veis agora:
        Atualmente, temos essas posi√ß√µes em aberto:
        Gere uma nova introdu√ß√£o sem repetir os exemplos.
        """
        introducao = client.chat.completions.create(
            model="gpt-4",
            temperature=0.9,
            messages=[{"role": "user", "content": prompt}]
        ).choices[0].message.content.strip()
        introducao = introducao.lstrip("‚Ä¢-").strip().strip('"')
        resposta = f"{introducao}\n"
        for vaga in vagas:
            resposta += f"{vaga['nome']}\n"
        return resposta.strip()
    else:
        return "Nenhuma vaga est√° dispon√≠vel no momento."

@tool
def detalhar_vaga(nome_vaga: str):
    """
    Retorna os detalhes de uma vaga espec√≠fica conforme registrado no banco de dados.
    Al√©m disso, armazena o nome da vaga no contexto global para que, se o usu√°rio
    pedir m√©tricas depois, n√£o seja necess√°rio extrair novamente do texto.
    """
    # Armazena a vaga detalhada no contexto
    set_ultima_vaga_detalhada(nome_vaga)

    historico_intencao = []
    nome_vaga_armazem = []
    return buscar_detalhes_vaga(nome_vaga, historico_intencao, nome_vaga_armazem)
@tool
def mostrar_metricas(nome_vaga: str):
    """Exibe as m√©tricas avan√ßadas da vaga informada.
    Ap√≥s exibir os dados, pergunta se o usu√°rio deseja gerar um relat√≥rio PDF.
    """
    metricas = buscar_metricas_por_vaga(nome_vaga)
    if metricas:
        detalhes_metricas = "üìä M√©tricas Adicionais:\n"
        for metrica in metricas:
            detalhes_metricas += (
                f"Visualiza√ß√µes: {metrica.get('visualizacoes', 0)}\n"
                f"Inscri√ß√µes: {metrica.get('inscricoes', 0)}\n"
                f"Inscri√ß√µes Iniciadas: {metrica.get('inscricoes_iniciadas', 0)}\n"
                f"Desist√™ncias: {metrica.get('desistencias', 0)}\n\n"
            )
        pergunta = "Deseja um relat√≥rio PDF com mais detalhes sobre essas m√©tricas?"
        return detalhes_metricas + pergunta
    else:
        return "N√£o consegui encontrar m√©tricas adicionais para esta vaga."

@tool
def gerar_pdf(nome_vaga: str):
    """Gera um relat√≥rio em PDF para a vaga especificada e retorna um link para download.
    Utiliza a fun√ß√£o gerar_pdf_relatorio_flexivel do arquivo db.py.
    """
    try:
        nome_arquivo = f"relatorio_{nome_vaga.replace(' ', '_').lower()}.pdf"
        caminho_destino = gerar_pdf_relatorio_flexivel(nome_arquivo=nome_arquivo, nome_vaga=nome_vaga)
        
        base_url = os.getenv("BASE_URL", "http://localhost:5000/")
        timestamp = int(os.path.getmtime(caminho_destino))
        link_pdf = f"{base_url}static/{nome_arquivo}?v={timestamp}"
        
        resposta_pdf = (
            "\nO relat√≥rio foi gerado com sucesso!\n"
            "Acesse o relat√≥rio clicando no link abaixo:\n" + link_pdf
        )
        return resposta_pdf
    except Exception as e:
        print(f"Erro ao gerar relat√≥rio: {e}")
        return "Erro ao gerar o relat√≥rio. Tente novamente mais tarde."
